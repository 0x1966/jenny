#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = require("yargs");
const helpers_1 = require("yargs/helpers");
const config_1 = require("./config");
const output_1 = require("./output");
const command_1 = require("./command");
const config = (0, config_1.loadConfig)((configFilename, error) => (0, output_1.printWarning)(`error loading "${configFilename}"`, error));
function configFromArgs(argv) {
    return {
        baseUrl: argv.baseUrl,
        user: argv.user,
        token: argv.token,
        jobTemplate: argv.jobTemplate,
        namePrefix: argv.namePrefix,
    };
}
(0, yargs_1.default)((0, helpers_1.hideBin)(process.argv))
    .command('delete [path]', 'delete jenkins jobs and views according to given path', (yargs) => yargs.positional('path', {
    describe: 'select jobs in view',
    type: 'string',
}), (argv) => command_1.Command.of(configFromArgs(argv)).deleteJobsAndViewsBasedOnPath(argv.path))
    .command('sync [path]', 'one-time sync jenkins jobs and views according to given path', (yargs) => yargs.positional('path', {
    describe: 'select jobs in view',
    type: 'string',
}), (argv) => command_1.Command.of(configFromArgs(argv)).syncJobsAndViewsBasedOnPath(argv.path))
    .option('baseUrl', {
    type: 'string',
    default: config.baseUrl || 'http://localhost:8080',
    description: 'Jenkins Base URL',
})
    .option('user', {
    type: 'string',
    default: config.user || undefined,
    description: 'Jenkins username',
})
    .option('token', {
    type: 'string',
    default: config.token || undefined,
    description: 'Jenkins authentication token',
})
    .option('jobTemplate', {
    type: 'string',
    default: config.jobTemplate || undefined,
    description: 'the pipeline job template to clone, when creating new jobs',
})
    .option('namePrefix', {
    type: 'string',
    default: config.namePrefix || undefined,
    description: 'the name prefix to use when naming jobs and views based on directories',
})
    .parse();
//# sourceMappingURL=data:application/json;base64,