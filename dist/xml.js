"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Xml = void 0;
const xmldom_1 = require("@xmldom/xmldom");
const MIME_TYPE__TEXT_XML = 'text/xml';
class Xml {
    static of(source) {
        return new Xml(source);
    }
    constructor(source) {
        this.serializer = new xmldom_1.XMLSerializer();
        this.document = typeof source === 'string' ? parseFromString(source) : source;
    }
    get() {
        return this.document;
    }
    getAsString() {
        return this.serializer.serializeToString(this.document);
    }
    withTextElementAdded(parentTagName, tagName, value) {
        const element = this.elementWithTextNode(tagName, value);
        const parents = this.document.getElementsByTagName(parentTagName);
        if (parents.length > 0) {
            parents[0].appendChild(element);
        }
        return this;
    }
    withTextValueSet(tagName, value) {
        const textNode = this.document.createTextNode(value);
        const elements = this.document.getElementsByTagName(tagName);
        if (elements && elements.length > 0) {
            while (elements[0].hasChildNodes()) {
                elements[0].removeChild(elements[0].childNodes[0]);
            }
            elements[0].appendChild(textNode);
        }
        return this;
    }
    elementWithTextNode(tagName, value) {
        const element = this.document.createElement(tagName);
        const textNode = this.document.createTextNode(value);
        element.appendChild(textNode);
        return element;
    }
}
exports.Xml = Xml;
function parseFromString(source) {
    return new xmldom_1.DOMParser().parseFromString(source, MIME_TYPE__TEXT_XML);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieG1sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3htbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBdUQ7QUFFdkQsTUFBTSxtQkFBbUIsR0FBRyxVQUFVLENBQUE7QUFFdEMsTUFBYSxHQUFHO0lBQ2QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUF5QjtRQUNqQyxPQUFPLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3hCLENBQUM7SUFLRCxZQUFvQixNQUF5QjtRQUMzQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksc0JBQWEsRUFBRSxDQUFBO1FBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtJQUMvRSxDQUFDO0lBRUQsR0FBRztRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQTtJQUN0QixDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDekQsQ0FBQztJQUVELG9CQUFvQixDQUFDLGFBQXFCLEVBQUUsT0FBZSxFQUFFLEtBQWE7UUFDeEUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUN4RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQ2pFLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUNoQztRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUVELGdCQUFnQixDQUFDLE9BQWUsRUFBRSxLQUFhO1FBQzdDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3BELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDNUQsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkMsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUU7Z0JBQ2xDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ25EO1lBQ0QsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtTQUNsQztRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUVPLG1CQUFtQixDQUFDLE9BQWUsRUFBRSxLQUFhO1FBQ3hELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3BELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3BELE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDN0IsT0FBTyxPQUFPLENBQUE7SUFDaEIsQ0FBQztDQUNGO0FBaERELGtCQWdEQztBQUVELFNBQVMsZUFBZSxDQUFDLE1BQWM7SUFDckMsT0FBTyxJQUFJLGtCQUFTLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLG1CQUFtQixDQUFDLENBQUE7QUFDckUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RE9NUGFyc2VyLCBYTUxTZXJpYWxpemVyfSBmcm9tICdAeG1sZG9tL3htbGRvbSdcblxuY29uc3QgTUlNRV9UWVBFX19URVhUX1hNTCA9ICd0ZXh0L3htbCdcblxuZXhwb3J0IGNsYXNzIFhtbCB7XG4gIHN0YXRpYyBvZihzb3VyY2U6IHN0cmluZyB8IERvY3VtZW50KTogWG1sIHtcbiAgICByZXR1cm4gbmV3IFhtbChzb3VyY2UpXG4gIH1cblxuICBwcml2YXRlIHNlcmlhbGl6ZXI6IFhNTFNlcmlhbGl6ZXJcbiAgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnRcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKHNvdXJjZTogc3RyaW5nIHwgRG9jdW1lbnQpIHtcbiAgICB0aGlzLnNlcmlhbGl6ZXIgPSBuZXcgWE1MU2VyaWFsaXplcigpXG4gICAgdGhpcy5kb2N1bWVudCA9IHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnID8gcGFyc2VGcm9tU3RyaW5nKHNvdXJjZSkgOiBzb3VyY2VcbiAgfVxuXG4gIGdldCgpOiBEb2N1bWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRcbiAgfVxuXG4gIGdldEFzU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc2VyaWFsaXplci5zZXJpYWxpemVUb1N0cmluZyh0aGlzLmRvY3VtZW50KVxuICB9XG5cbiAgd2l0aFRleHRFbGVtZW50QWRkZWQocGFyZW50VGFnTmFtZTogc3RyaW5nLCB0YWdOYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBYbWwge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRXaXRoVGV4dE5vZGUodGFnTmFtZSwgdmFsdWUpXG4gICAgY29uc3QgcGFyZW50cyA9IHRoaXMuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocGFyZW50VGFnTmFtZSlcbiAgICBpZiAocGFyZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBwYXJlbnRzWzBdLmFwcGVuZENoaWxkKGVsZW1lbnQpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB3aXRoVGV4dFZhbHVlU2V0KHRhZ05hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IFhtbCB7XG4gICAgY29uc3QgdGV4dE5vZGUgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZhbHVlKVxuICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKVxuICAgIGlmIChlbGVtZW50cyAmJiBlbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICB3aGlsZSAoZWxlbWVudHNbMF0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgIGVsZW1lbnRzWzBdLnJlbW92ZUNoaWxkKGVsZW1lbnRzWzBdLmNoaWxkTm9kZXNbMF0pXG4gICAgICB9XG4gICAgICBlbGVtZW50c1swXS5hcHBlbmRDaGlsZCh0ZXh0Tm9kZSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHByaXZhdGUgZWxlbWVudFdpdGhUZXh0Tm9kZSh0YWdOYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKVxuICAgIGNvbnN0IHRleHROb2RlID0gdGhpcy5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSlcbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKHRleHROb2RlKVxuICAgIHJldHVybiBlbGVtZW50XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VGcm9tU3RyaW5nKHNvdXJjZTogc3RyaW5nKTogRG9jdW1lbnQge1xuICByZXR1cm4gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhzb3VyY2UsIE1JTUVfVFlQRV9fVEVYVF9YTUwpXG59XG4iXX0=