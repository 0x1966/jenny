"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Command = void 0;
const jenkins_1 = require("./jenkins");
const files_1 = require("./files");
const output_1 = require("./output");
class Command {
    static of(config) {
        return new Command(config);
    }
    constructor(config) {
        this.config = config;
        this.jenkins = jenkins_1.Jenkins.of(config.baseUrl, config.user, config.token);
    }
    deleteJobsAndViewsBasedOnPath(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const jenkinsJobsAndViews = yield this.jenkins.listJobsAndViews();
            const fileBasedJobsAndViews = yield files_1.Files.of(path, this.config.namePrefix).listJobsAndViews();
            const jenkinsJobsToDelete = jenkinsJobsAndViews.jobs.filter((name) => fileBasedJobsAndViews.jobs.some((job) => job.name === name));
            const jenkinsViewsToDelete = jenkinsJobsAndViews.views.filter((name) => fileBasedJobsAndViews.views.some((view) => view.name === name));
            jenkinsViewsToDelete.forEach((name) => this.jenkins
                .deleteViewByName(name)
                .then((n) => (0, output_1.println)(`[X] view "${n}"`))
                .catch((e) => (0, output_1.printError)(`[!] error deleting view "${name}"`, e)));
            jenkinsJobsToDelete.forEach((name) => this.jenkins
                .deleteJobByName(name)
                .then((n) => (0, output_1.println)(`[X] job "${n}"`))
                .catch((e) => (0, output_1.printError)(`[!] error deleting job "${name}"`, e)));
        });
    }
    syncJobsAndViewsBasedOnPath(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const jenkinsJobsAndViews = yield this.jenkins.listJobsAndViews();
            const fileBasedJobsAndViews = yield files_1.Files.of(path, this.config.namePrefix).listJobsAndViews();
            yield this.syncJobsBasedOnPath(jenkinsJobsAndViews, fileBasedJobsAndViews);
            yield this.syncViewsBasedOnPath(jenkinsJobsAndViews, fileBasedJobsAndViews);
        });
    }
    syncJobsBasedOnPath(jenkinsJobsAndViews, fileBasedJobsAndViews) {
        return __awaiter(this, void 0, void 0, function* () {
            const jenkinsJobsToDelete = jenkinsJobsAndViews.jobs
                .filter((name) => name.startsWith(this.config.namePrefix))
                .filter((name) => !fileBasedJobsAndViews.jobs.some((job) => job.name === name));
            const fileBasedJobsToCreate = fileBasedJobsAndViews.jobs.filter((job) => !jenkinsJobsAndViews.jobs.some((name) => job.name === name));
            const fileBasedJobsToUpdate = fileBasedJobsAndViews.jobs.filter((job) => jenkinsJobsAndViews.jobs.some((name) => job.name === name));
            jenkinsJobsToDelete.forEach((name) => this.jenkins
                .deleteJobByName(name)
                .then((n) => (0, output_1.println)(`[X] job "${n}"`))
                .catch((e) => (0, output_1.printError)(`[!] error deleting job "${name}"`, e)));
            fileBasedJobsToCreate.forEach((job) => this.jenkins
                .createJobFromTemplate(this.config.jobTemplate, job.name, job.script)
                .then((n) => (0, output_1.println)(`[C] job "${n}"`))
                .catch((e) => (0, output_1.printError)(`[!] error creating job "${job.name}"`, e)));
            fileBasedJobsToUpdate.forEach((job) => this.jenkins
                .updateJobPipelineScript(job.name, job.script)
                .then((n) => (0, output_1.println)(`[U] job "${n}"`))
                .catch((e) => (0, output_1.printError)(`[!] error updating job "${job.name}"`, e)));
        });
    }
    syncViewsBasedOnPath(jenkinsJobsAndViews, fileBasedJobsAndViews) {
        return __awaiter(this, void 0, void 0, function* () {
            const jenkinsViewsToDelete = jenkinsJobsAndViews.views
                .filter((name) => name.startsWith(this.config.namePrefix))
                .filter((name) => !fileBasedJobsAndViews.views.some((view) => view.name === name));
            const fileBasedViewsToCreate = fileBasedJobsAndViews.views.filter((view) => !jenkinsJobsAndViews.views.some((name) => view.name === name));
            jenkinsViewsToDelete.forEach((name) => this.jenkins
                .deleteViewByName(name)
                .then((n) => (0, output_1.println)(`[X] view "${n}"`))
                .catch((e) => (0, output_1.printError)(`[!] error deleting view "${name}"`, e)));
            fileBasedViewsToCreate.forEach((view) => this.jenkins
                .createRegexBasedListView(view.name, view.regex)
                .then((n) => (0, output_1.println)(`[C] view "${n}"`))
                .catch((e) => (0, output_1.printError)(`[!] error creating view "${view.name}"`, e)));
        });
    }
}
exports.Command = Command;
//# sourceMappingURL=data:application/json;base64,